diff --git packages/react-native/ReactCommon/jsi/jsi/decorator.h packages/react-native/ReactCommon/jsi/jsi/decorator.h
index 7bddd1fad80..acceec54d67 100644
--- packages/react-native/ReactCommon/jsi/jsi/decorator.h
+++ packages/react-native/ReactCommon/jsi/jsi/decorator.h
@@ -32,7 +32,7 @@ class DecoratedHostFunction {
   }
 
   Value
-  operator()(Runtime&, const Value& thisVal, const Value* args, size_t count) {
+  operator()(Runtime&, Value& thisVal, Value* args, size_t count) {
     return plainHF_(decoratedRuntime(), thisVal, args, count);
   }
 
diff --git packages/react-native/ReactCommon/jsi/jsi/jsi.h packages/react-native/ReactCommon/jsi/jsi/jsi.h
index 962dae93609..5ce9d3ff89b 100644
--- packages/react-native/ReactCommon/jsi/jsi/jsi.h
+++ packages/react-native/ReactCommon/jsi/jsi/jsi.h
@@ -109,7 +109,7 @@ class JSError;
 /// can be any value - it will not necessarily be coerced to an object or
 /// or set to the global object.
 using HostFunctionType = std::function<
-    Value(Runtime& rt, const Value& thisVal, const Value* args, size_t count)>;
+    Value(Runtime& rt, Value& thisVal, Value* args, size_t count)>;
 
 /// An object which implements this interface can be registered as an
 /// Object with the JS runtime.
