import { describe, expect, it, vi } from "vitest";
import { Node, NodeType } from "@player-ui/player";
import { traverseAndReplace } from "../traverseAndReplace";

describe("traverseAndReplace", () => {
  it("should call the replace function against the given node if it is not a multi-node", () => {
    const node: Node.Value = {
      type: NodeType.Value,
      value: {
        prop: "value",
      },
    };

    const replaceFunction = vi.fn();
    replaceFunction.mockReturnValue({
      type: NodeType.Value,
      value: {
        prop: "new-value",
      },
    });

    const result = traverseAndReplace(node, replaceFunction);

    expect(result).toStrictEqual({
      type: "value",
      value: {
        prop: "new-value",
      },
    });
    expect(replaceFunction).toHaveBeenCalledOnce();
    expect(replaceFunction).toHaveBeenCalledWith({
      type: "value",
      value: {
        prop: "value",
      },
    });
  });

  it("should call the replace function once for each value in the multi-node", () => {
    const node: Node.MultiNode = {
      type: NodeType.MultiNode,
      values: [
        {
          type: NodeType.Value,
          value: {
            prop: "value-1",
          },
        },
        {
          type: NodeType.Value,
          value: {
            prop: "value-2",
          },
        },
      ],
    };

    const replaceFunction = vi.fn();
    replaceFunction.mockReturnValue({
      type: NodeType.Value,
      value: {
        prop: "new-value",
      },
    });

    const result = traverseAndReplace(node, replaceFunction);

    expect(result).toStrictEqual({
      type: "multi-node",
      values: [
        {
          type: NodeType.Value,
          value: {
            prop: "new-value",
          },
        },
        {
          type: NodeType.Value,
          value: {
            prop: "new-value",
          },
        },
      ],
    });
    expect(replaceFunction).toHaveBeenCalledTimes(2);
    expect(replaceFunction).toHaveBeenCalledWith({
      type: "value",
      value: {
        prop: "value-1",
      },
    });
    expect(replaceFunction).toHaveBeenCalledWith({
      type: "value",
      value: {
        prop: "value-2",
      },
    });
  });

  it("should flatten multi-node values generated by the replace function if the top-level node is a multi-node", () => {
    const node: Node.MultiNode = {
      type: NodeType.MultiNode,
      values: [
        {
          type: NodeType.Value,
          value: {
            prop: "first",
          },
        },
      ],
    };

    const replaceFunction = vi.fn();
    replaceFunction.mockImplementation((node: Node.Node) => {
      if (node.type === NodeType.Value && node.value.prop === "first") {
        return {
          type: NodeType.MultiNode,
          values: [
            {
              type: NodeType.Value,
              value: {
                prop: "second",
              },
            },
            {
              type: NodeType.Value,
              value: {
                prop: "third",
              },
            },
          ],
        };
      }

      return {
        type: NodeType.Value,
        value: {
          prop: "new-value",
        },
      };
    });

    const result = traverseAndReplace(node, replaceFunction);

    expect(result).toStrictEqual({
      type: "multi-node",
      values: [
        {
          type: NodeType.Value,
          value: {
            prop: "new-value",
          },
        },
        {
          type: NodeType.Value,
          value: {
            prop: "new-value",
          },
        },
      ],
    });
    expect(replaceFunction).toHaveBeenCalledTimes(3);
    expect(replaceFunction).toHaveBeenCalledWith({
      type: "value",
      value: {
        prop: "first",
      },
    });
    expect(replaceFunction).toHaveBeenCalledWith({
      type: "value",
      value: {
        prop: "second",
      },
    });
    expect(replaceFunction).toHaveBeenCalledWith({
      type: "value",
      value: {
        prop: "third",
      },
    });
  });
});
