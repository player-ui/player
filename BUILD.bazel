load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag", "int_flag")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@rules_player//internal:defs.bzl", "stamp")
load("@rules_player//ios:defs.bzl", "assemble_pod", "ios_publish")

package(default_visibility = ["//visibility:public"])

npm_link_all_packages(
    name = "node_modules",
)

exports_files([
    "VERSION",
    "babel.config.js",
    "tsconfig.json",
    "package.json",
    "jest.config.js",
    "webpack.config.js",
    ".editorconfig",
    ".all-contributorsrc",
    "README.md",
])

js_library(
    name = "vitest_config",
    testonly = True,
    srcs = [
        "scripts/vitest.setup.ts",
        "vitest.config.mts",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:node_modules/@testing-library/jest-dom",
        "//:node_modules/@testing-library/react",
        "//:node_modules/@testing-library/user-event",
        "//:node_modules/@vitest/coverage-v8",
        "//:node_modules/happy-dom",
        "//:node_modules/vitest",
        "//tools:vitest_coverage_mapper",
    ],
)

js_library(
    name = "eslint_config",
    testonly = True,
    srcs = [
        "eslint.config.mts",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":node_modules/@eslint/js",
        ":node_modules/typescript-eslint",
        ":node_modules/eslint",
        ":node_modules/eslint-plugin-prettier",
        ":node_modules/eslint-plugin-react",
        ":node_modules/eslint-config-prettier",
        ":node_modules/jiti"
    ],
)

js_library(
    name = "tsup_config",
    srcs = [
        "tsup.config.ts",
    ],
    data = [":typings"],
    visibility = ["//visibility:public"],
    deps = [
        ":node_modules/@types/node",
        ":node_modules/tsup",
        ":node_modules/typescript",
        ":node_modules/vitest",
    ],
)

js_library(
    name = "typings",
    srcs = [
        "tsconfig.build.json",
        "tsconfig.json",
    ] + glob(["typings/*"]),
    visibility = ["//visibility:public"],
)


##### Start iOS #####

# Update the version in the podspec
stamp(
    name = "PlayerUI_Podspec",
    files = ["//:PlayerUI.podspec"],
    stable = True,
    stamp = -1,
    substitutions = {
        "0.0.1-placeholder": "{STABLE_VERSION}",
    },
)

exports_files([
    "PlayerUI.podspec",
])

assemble_pod(
    name = "PlayerUI_Pod",
    srcs = glob([
        "LICENSE",
        "Package.swift",
    ]),
    data = {
        # Core
        "//ios/core:PlayerUI_Sources": "ios/core/",
        "//core/player:player_native_bundle": "ios/core/Resources/",
        "//plugins/partial-match-fingerprint/core:core_native_bundle": "ios/core/Resources/",
        "//core/partial-match-registry:partial-match-registry_native_bundle": "ios/core/Resources/",

        # SwiftUI
        "//ios/swiftui:PlayerUISwiftUI_Sources": "ios/swiftui/",

        # Logger
        "//ios/logger:PlayerUILogger_Sources": "ios/logger/",

        # Test Utilities
        "//ios/test-utils-core:PlayerUITestUtilitiesCore_Sources": "ios/test-utils-core/",
        "//ios/test-utils:PlayerUITestUtilities_Sources": "ios/test-utils/",
        "//core/make-flow:make-flow_native_bundle": "ios/test-utils-core/Resources/",

        # Plugins #

        # Beacon
        "//plugins/beacon/ios:PlayerUIBaseBeaconPlugin_Sources": "plugins/beacon/ios/",
        "//plugins/beacon/swiftui:PlayerUIBeaconPlugin_Sources": "plugins/beacon/swiftui/",
        "//plugins/beacon/core:core_native_bundle": "plugins/beacon/ios/Resources/",

        # Check Path
        "//plugins/check-path/ios:PlayerUICheckPathPlugin_Sources": "plugins/check-path/ios/",
        "//plugins/check-path/swiftui:PlayerUISwiftUICheckPathPlugin_Sources": "plugins/check-path/swiftui/",
        "//plugins/check-path/core:core_native_bundle": "plugins/check-path/ios/Resources/",

        # Common Expressions
        "//plugins/common-expressions/ios:PlayerUICommonExpressionsPlugin_Sources": "plugins/common-expressions/ios/",
        "//plugins/common-expressions/core:core_native_bundle": "plugins/common-expressions/ios/Resources/",

        # Common Types
        "//plugins/common-types/ios:PlayerUICommonTypesPlugin_Sources": "plugins/common-types/ios/",
        "//plugins/common-types/core:core_native_bundle": "plugins/common-types/ios/Resources/",

        # Computed Properties
        "//plugins/computed-properties/ios:PlayerUIComputedPropertiesPlugin_Sources": "plugins/computed-properties/ios/",
        "//plugins/computed-properties/core:core_native_bundle": "plugins/computed-properties/ios/Resources/",

        # Console Logger (PrintLoggerPlugin)
        "//plugins/console-logger/ios:PlayerUIPrintLoggerPlugin_Sources": "plugins/console-logger/ios/",

        # Expression
        "//plugins/expression/ios:PlayerUIExpressionPlugin_Sources": "plugins/expression/ios/",
        "//plugins/expression/core:core_native_bundle": "plugins/expression/ios/Resources/",

        # External Action
        "//plugins/external-action/ios:PlayerUIExternalActionPlugin_Sources": "plugins/external-action/ios/",
        "//plugins/external-action/swiftui:PlayerUIExternalActionViewModifierPlugin_Sources": "plugins/external-action/swiftui/",
        "//plugins/external-action/core:core_native_bundle": "plugins/external-action/ios/Resources/",

        # Metrics
        "//plugins/metrics/swiftui:PlayerUIMetricsPlugin_Sources": "plugins/metrics/swiftui/",
        "//plugins/metrics/core:core_native_bundle": "plugins/metrics/swiftui/Resources/",

        # Pending Transaction
        "//plugins/pending-transaction/swiftui:PlayerUISwiftUIPendingTransactionPlugin_Sources": "plugins/pending-transaction/swiftui/",

        # PubSub
        "//plugins/pubsub/ios:PlayerUIPubSubPlugin_Sources": "plugins/pubsub/ios/",
        "//plugins/pubsub/core:core_native_bundle": "plugins/pubsub/ios/Resources/",

        # Reference Assets
        "//plugins/reference-assets/swiftui:PlayerUIReferenceAssets_Sources": "plugins/reference-assets/swiftui/",
        "//plugins/reference-assets/swiftui/Resources:PlayerUIReferenceAssets_Resources": "plugins/reference-assets/swiftui/Resources/",
        "//plugins/reference-assets/core:core_native_bundle": "plugins/reference-assets/swiftui/Resources/js/",

        # Stage Revert Data
        "//plugins/stage-revert-data/ios:PlayerUIStageRevertDataPlugin_Sources": "plugins/stage-revert-data/ios/",
        "//plugins/stage-revert-data/core:core_native_bundle": "plugins/stage-revert-data/ios/Resources/",

        # Transition
        "//plugins/transition/swiftui:PlayerUITransitionPlugin_Sources": "plugins/transition/swiftui",

        # Types Provider
        "//plugins/types-provider/ios:PlayerUITypesProviderPlugin_Sources": "plugins/types-provider/ios/",
        "//plugins/types-provider/core:core_native_bundle": "plugins/types-provider/ios/Resources/",
    },
    podspec = ":PlayerUI_Podspec",
)

ios_publish(
    name = "ios_publish",
    zip = ":PlayerUI_Pod",
    # SPM Release Repo
    repository = "git@github.com:player-ui/playerui-swift-package.git",
    # CocoaPods
    podspec = ":PlayerUI_Podspec",
    executable = "bundle exec pod",
    globalFlags = [
        # because jenkins runs as root
        "--allow-root",
    ],
    pushFlags = [
        # skip tests because it never runs them right
        # and they're run as part of the build pipeline anyway
        "--skip-tests",
    ],
)

# SwiftLint
exports_files([".swiftlint.yml"])

##### End iOS #####

alias(
    name = "android_tools",
    actual = "@bazel_tools//src/tools/android/java/com/google/devtools/build/android:all_android_tools",
    visibility = ["//visibility:public"],
)

java_plugin(
    name = "compiler_annotation_processor",
    generates_api = False,
    processor_class = "android.databinding.annotationprocessor.ProcessDataBinding",
    visibility = ["//visibility:public"],
    deps = [
        ":android_tools",
    ],
)

# Native platform settings

int_flag(
    name = "cmake_build_parallel_level",
    build_setting_default = 4,
    make_variable = "CMAKE_BUILD_PARALLEL_LEVEL",
)

string_flag(
    name = "cmake_build_type",
    build_setting_default = "Debug",
    make_variable = "CMAKE_BUILD_TYPE",
    values = [
        "Debug",
        "Release",
        "MinSizeRel",
        "RelWithDebInfo",
    ],
)

config_setting(
    name = "cmake_build_type_debug",
    flag_values = {
        ":cmake_build_type": "Debug",
    },
)

config_setting(
    name = "cmake_build_type_release",
    flag_values = {
        ":cmake_build_type": "Release",
    },
)

config_setting(
    name = "cmake_build_type_minsizerel",
    flag_values = {
        ":cmake_build_type": "MinSizeRel",
    },
)

config_setting(
    name = "cmake_build_type_relwithdebinfo",
    flag_values = {
        ":cmake_build_type": "RelWithDebInfo",
    },
)

config_setting(
    name = "android-arm64-v8a",
    constraint_values = [
        "@platforms//cpu:arm64",
        "@platforms//os:android",
    ],
)

config_setting(
    name = "android-armeabi-v7a",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:armv7",
    ],
)

config_setting(
    name = "android-x86",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:x86_32",
    ],
)

config_setting(
    name = "android-x86_64",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:x86_64",
    ],
)
