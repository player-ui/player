load("@rules_player//ios:defs.bzl", "assemble_pod")
load("@rules_player//internal:defs.bzl", "stamp")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@bazel_gazelle//:def.bzl", "gazelle_binary", "gazelle")
load("@rules_swift_package_manager//swiftpkg:defs.bzl", "swift_update_packages")
load("@bazel_tools//tools/jdk:default_java_toolchain.bzl", "default_java_toolchain")

package(default_visibility = ["//visibility:public"])

npm_link_all_packages(
    name = "node_modules",
)

exports_files([
    "VERSION",
    "babel.config.js",
    "tsconfig.json",
    "package.json",
    "jest.config.js",
    "webpack.config.js",
    ".editorconfig",
    ".all-contributorsrc",
    "README.md",
    # "patches/@chakra-ui__system@2.6.2.patch",
])

js_library(
    name = "vitest_config",
    testonly = True,
    srcs = [
        "scripts/vitest.setup.ts",
        "vitest.config.ts",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:node_modules/@testing-library/jest-dom",
        "//:node_modules/@testing-library/react",
        "//:node_modules/@testing-library/react-hooks",
        "//:node_modules/@testing-library/user-event",
        "//:node_modules/@vitest/coverage-v8",
        "//:node_modules/happy-dom",
        "//:node_modules/vitest",
        "//tools:vitest_coverage_mapper",
    ],
)

js_library(
    name = "eslint_config",
    testonly = True,
    srcs = [
        ".eslintrc.js",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":node_modules/@typescript-eslint/eslint-plugin",
        ":node_modules/@typescript-eslint/parser",
        ":node_modules/eslint",
        ":node_modules/eslint-plugin-prettier",
        ":node_modules/eslint-plugin-react",
    ],
)

js_library(
    name = "tsup_config",
    srcs = [
        "tsup.config.ts",
    ],
    data = [":typings"],
    visibility = ["//visibility:public"],
    deps = [
        ":node_modules/@types/node",
        ":node_modules/tsup",
        ":node_modules/typescript",
        ":node_modules/vitest",
    ],
)

js_library(
    name = "typings",
    srcs = [
        "tsconfig.build.json",
        "tsconfig.json",
    ] + glob(["typings/*"]),
    visibility = ["//visibility:public"],
)

# # Update the version in the podspec
stamp(
    name = "PlayerUI_Podspec",
    files = ["//:PlayerUI.podspec"],
    stable = True,
    substitutions = {
        "0.0.1-placeholder": "{STABLE_VERSION}",
    },
    stamp = -1,
)

exports_files([
    "PlayerUI.podspec"
])

assemble_pod(
    name = "PlayerUI_Pod",
    srcs = glob([
        "LICENSE",
        "Package.swift",
    ]),
    data = {
        # Core
        "//ios/core:PlayerUI_Sources": "ios/core/",
        "//core/player:player_native_bundle": "ios/core/Resources/",
        "//plugins/partial-match-fingerprint/core:core_native_bundle": "ios/core/Resources/",
        "//core/partial-match-registry:partial-match-registry_native_bundle": "ios/core/Resources/",

        # SwiftUI
        "//ios/swiftui:PlayerUISwiftUI_Sources": "ios/swiftui/",

        # Logger
        "//ios/logger:PlayerUILogger_Sources": "ios/logger/",

        # Test Utilities
        "//ios/test-utils-core:PlayerUITestUtilitiesCore_Sources": "ios/test-utils-core/",
        "//ios/test-utils:PlayerUITestUtilities_Sources": "ios/test-utils/",
        "//core/make-flow:make-flow_native_bundle": "ios/test-utils-core/Resources/",

        # Plugins #

        # Beacon
        "//plugins/beacon/ios:PlayerUIBaseBeaconPlugin_Sources": "plugins/beacon/ios/",
        "//plugins/beacon/swiftui:PlayerUIBeaconPlugin_Sources": "plugins/beacon/swiftui/",
        "//plugins/beacon/core:core_native_bundle": "plugins/beacon/ios/Resources/",

        # Check Path
        "//plugins/check-path/ios:PlayerUICheckPathPlugin_Sources": "plugins/check-path/ios/",
        "//plugins/check-path/swiftui:PlayerUISwiftUICheckPathPlugin_Sources": "plugins/check-path/swiftui/",
        "//plugins/check-path/core:core_native_bundle": "plugins/check-path/ios/Resources/",

        # Common Expressions
        "//plugins/common-expressions/ios:PlayerUICommonExpressionsPlugin_Sources": "plugins/common-expressions/ios/",
        "//plugins/common-expressions/core:core_native_bundle": "plugins/common-expressions/ios/Resources/",

        # Common Types
        "//plugins/common-types/ios:PlayerUICommonTypesPlugin_Sources": "plugins/common-types/ios/",
        "//plugins/common-types/core:core_native_bundle": "plugins/common-types/ios/Resources/",

        # Computed Properties
        "//plugins/computed-properties/ios:PlayerUIComputedPropertiesPlugin_Sources": "plugins/computed-properties/ios/",
        "//plugins/computed-properties/core:core_native_bundle": "plugins/computed-properties/ios/Resources/",

        # Console Logger (PrintLoggerPlugin)
        "//plugins/console-logger/ios:PlayerUIPrintLoggerPlugin_Sources": "plugins/console-logger/ios/",

        # Expression
        "//plugins/expression/ios:PlayerUIExpressionPlugin_Sources": "plugins/expression/ios/",
        "//plugins/expression/core:core_native_bundle": "plugins/expression/ios/Resources/",

        # External Action
        "//plugins/external-action/ios:PlayerUIExternalActionPlugin_Sources": "plugins/external-action/ios/",
        "//plugins/external-action/swiftui:PlayerUIExternalActionViewModifierPlugin_Sources": "plugins/external-action/swiftui/",
        "//plugins/external-action/core:core_native_bundle": "plugins/external-action/ios/Resources/",

        # Metrics
        "//plugins/metrics/swiftui:PlayerUIMetricsPlugin_Sources": "plugins/metrics/swiftui/",
        "//plugins/metrics/core:core_native_bundle": "plugins/metrics/swiftui/Resources/",

        # Pending Transaction
        "//plugins/pending-transaction/swiftui:PlayerUISwiftUIPendingTransactionPlugin_Sources": "plugins/pending-transaction/swiftui/",

        # PubSub
        "//plugins/pubsub/ios:PlayerUIPubSubPlugin_Sources": "plugins/pubsub/ios/",
        "//plugins/pubsub/core:core_native_bundle": "plugins/pubsub/ios/Resources/",

        # Reference Assets
        "//plugins/reference-assets/swiftui:PlayerUIReferenceAssets_Sources": "plugins/reference-assets/swiftui/",
        "//plugins/reference-assets/swiftui/Resources:PlayerUIReferenceAssets_Resources": "plugins/reference-assets/swiftui/Resources/",
        "//plugins/reference-assets/core:core_native_bundle": "plugins/reference-assets/swiftui/Resources/js/",

        # Stage Revert Data
        "//plugins/stage-revert-data/ios:PlayerUIStageRevertDataPlugin_Sources": "plugins/stage-revert-data/ios/",
        "//plugins/stage-revert-data/core:core_native_bundle": "plugins/stage-revert-data/ios/Resources/",

        # Transition
        "//plugins/transition/swiftui:PlayerUITransitionPlugin_Sources": "plugins/transition/swiftui",

        # Types Provider
        "//plugins/types-provider/ios:PlayerUITypesProviderPlugin_Sources": "plugins/types-provider/ios/",
        "//plugins/types-provider/core:core_native_bundle": "plugins/types-provider/ios/Resources/",
    },
    podspec = ":PlayerUI_Podspec",
)

# # Push podspec to specs repo
# # tag must exist in github first
# pod_push(
#     name = "PlayerUI_Pod_Push",
#     executable = "bundle exec pod",
#     globalFlags = [],
#     podspec = ":PlayerUI_Podspec",
#     pushFlags = [
#         # skip tests because it never runs them right
#         # and they're run as part of the build pipeline anyway
#         "--skip-tests",
#     ],
# )

# Ignore the `.build` folder that is created by running Swift package manager
# commands. The Swift Gazelle plugin executes some Swift package manager
# commands to resolve external dependencies. This results in a `.build` file
# being created.
# NOTE: Swift package manager is not used to build any of the external packages.
# The `.build` directory should be ignored. Be sure to configure your source
# control to ignore it (i.e., add it to your `.gitignore`).
# gazelle:exclude .build

# This declaration builds a Gazelle binary that incorporates all of the Gazelle
# plugins for the languages that you use in your workspace. In this example, we
# are only listing the Gazelle plugin for Swift from rules_swift_package_manager.
gazelle_binary(
    name = "gazelle_bin",
    languages = [
        "@rules_swift_package_manager//gazelle",
    ],
)

# This macro defines two targets: `swift_update_pkgs` and
# `swift_update_pkgs_to_latest`.
#
# The `swift_update_pkgs` target should be run whenever the list of external
# dependencies is updated in the `Package.swift`. Running this target will
# populate the `swift_deps.bzl` with `swift_package` declarations for all of
# the direct and transitive Swift packages that your project uses.
#
# The `swift_update_pkgs_to_latest` target should be run when you want to
# update your Swift dependencies to their latest eligible version.
swift_update_packages(
    name = "swift_update_pkgs",
    gazelle = ":gazelle_bin",
    generate_swift_deps_for_workspace = True,
    package_manifest = "./xcode/Package.swift",
    swift_deps = "swift_deps.bzl",
    swift_deps_index = "swift_deps_index.json",
    update_bzlmod_stanzas = False,
)

# This target updates the Bazel build files for your project. Run this target
# whenever you add or remove source files from your project.
gazelle(
    name = "update_build_files",
    gazelle = ":gazelle_bin",
)

alias(
    name = "android_tools",
    actual = "@bazel_tools//src/tools/android/java/com/google/devtools/build/android:all_android_tools",
    visibility = ["//visibility:public"],
)

java_plugin(
    name = "compiler_annotation_processor",
    generates_api = False,
    processor_class = "android.databinding.annotationprocessor.ProcessDataBinding",
    visibility = ["//visibility:public"],
    deps = [
        ":android_tools",
    ],
)
#SwiftLint
exports_files([".swiftlint.yml"])
