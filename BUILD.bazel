# load("@rules_player//cocoapods:cocoapod.bzl", "assemble_pod", "pod_push")
# load("@rules_player//internal:stamp.bzl", "stamp")
# load("//:generated.bzl", "PlayerUI", "PlayerUI_Demo", "ui_tests", "unit_tests")

load("@npm//:defs.bzl", "npm_link_all_packages")
load("@aspect_rules_js//js:defs.bzl", "js_library")

package(default_visibility = ["//visibility:public"])

npm_link_all_packages(
    name = "node_modules",
)

exports_files([
    "VERSION",
    "babel.config.js",
    "tsconfig.json",
    "package.json",
    "jest.config.js",
    "webpack.config.js",
    ".editorconfig",
    ".all-contributorsrc",
    "README.md",
])

js_library(
    name = "vitest_config",
    testonly = True,
    srcs = [
        "scripts/vitest.setup.ts",
        "vitest.config.ts",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:node_modules/@testing-library/jest-dom",
        "//:node_modules/@testing-library/react",
        "//:node_modules/@testing-library/react-hooks",
        "//:node_modules/@testing-library/user-event",
        "//:node_modules/@vitest/coverage-v8",
        "//:node_modules/happy-dom",
        "//:node_modules/vitest",
        "//tools:vitest_coverage_mapper",
    ],
)

js_library(
    name = "eslint_config",
    testonly = True,
    srcs = [
        ".eslintrc.js",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":node_modules/@typescript-eslint/eslint-plugin",
        ":node_modules/@typescript-eslint/parser",
        ":node_modules/eslint",
        ":node_modules/eslint-plugin-prettier",
        ":node_modules/eslint-plugin-react",
    ],
)

js_library(
    name = "tsup_config",
    srcs = [
        "tsup.config.ts",
    ],
    data = [":typings"],
    visibility = ["//visibility:public"],
    deps = [
        ":node_modules/@types/node",
        ":node_modules/tsup",
        ":node_modules/typescript",
        ":node_modules/vitest",
    ],
)

js_library(
    name = "typings",
    srcs = ["tsconfig.build.json"] + glob(["typings/*"]),
    visibility = ["//visibility:public"],
)
# PlayerUI(deps = [])

# PlayerUI_Demo(deps = [])

# unit_tests()

# ui_tests()

# # Update the version in the podspec
# stamp(
#     name = "PlayerUI_Podspec",
#     files = ["//:PlayerUI.podspec"],
#     stable = True,
#     substitutions = {
#         "0.0.1-placeholder": "{STABLE_VERSION}",
#     },
# )

# assemble_pod(
#     name = "PlayerUI_Pod",
#     srcs = glob([
#         "ios/**/*.swift",
#         "LICENSE",
#     ]),
#     data = {
#         # Core
#         "//core/player:Player_Bundles_bundle_prod": "ios/packages/core/Resources/",
#         "//plugins/partial-match-fingerprint/core:PartialMatchFingerprintPlugin_Bundles_bundle_prod": "ios/packages/core/Resources/",
#         "//core/partial-match-registry:Registry_Bundles_bundle_prod": "ios/packages/core/Resources/",

#         # Packages
#         "//core/make-flow:MakeFlow_Bundles_bundle_prod": "ios/packages/test-utils/Resources/",
#         "//plugins/reference-assets/core:ReferenceAssetsPlugin_Bundles_bundle_prod": "ios/packages/reference-assets/Resources/js/",
#         # Plugins
#         "//plugins/beacon/core:BeaconPlugin_Bundles_bundle_prod": "ios/plugins/BaseBeaconPlugin/Resources/",
#         "//plugins/check-path/core:CheckPathPlugin_Bundles_bundle_prod": "ios/plugins/CheckPathPlugin/Resources/",
#         "//plugins/common-types/core:CommonTypesPlugin_Bundles_bundle_prod": "ios/plugins/CommonTypesPlugin/Resources/",
#         "//plugins/common-expressions/core:CommonExpressionsPlugin_Bundles_bundle_prod": "ios/plugins/CommonExpressionsPlugin/Resources/",
#         "//plugins/computed-properties/core:ComputedPropertiesPlugin_Bundles_bundle_prod": "ios/plugins/ComputedPropertiesPlugin/Resources/",
#         "//plugins/expression/core:ExpressionPlugin_Bundles_bundle_prod": "ios/plugins/ExpressionPlugin/Resources/",
#         "//plugins/external-action/core:ExternalActionPlugin_Bundles_bundle_prod": "ios/plugins/ExternalActionPlugin/Resources/",
#         "//plugins/metrics/core:MetricsPlugin_Bundles_bundle_prod": "ios/plugins/MetricsPlugin/Resources/",
#         "//plugins/pubsub/core:PubSubPlugin_Bundles_bundle_prod": "ios/plugins/PubSubPlugin/Resources/",
#         "//plugins/stage-revert-data/core:StageRevertDataPlugin_Bundles_bundle_prod": "ios/plugins/StageRevertDataPlugin/Resources/",
#         "//plugins/types-provider/core:TypesProviderPlugin_Bundles_bundle_prod": "ios/plugins/TypesProviderPlugin/Resources/",
#     },
#     podspec = ":PlayerUI_Podspec",
# )

# # Push podspec to specs repo
# # tag must exist in github first
# pod_push(
#     name = "PlayerUI_Pod_Push",
#     executable = "bundle exec pod",
#     globalFlags = [],
#     podspec = ":PlayerUI_Podspec",
#     pushFlags = [
#         # skip tests because it never runs them right
#         # and they're run as part of the build pipeline anyway
#         "--skip-tests",
#     ],
# )

load("@bazel_gazelle//:def.bzl", "gazelle", "gazelle_binary")
load("@rules_swift_package_manager//swiftpkg:defs.bzl", "swift_update_packages")

# Ignore the `.build` folder that is created by running Swift package manager
# commands. The Swift Gazelle plugin executes some Swift package manager
# commands to resolve external dependencies. This results in a `.build` file
# being created.
# NOTE: Swift package manager is not used to build any of the external packages.
# The `.build` directory should be ignored. Be sure to configure your source
# control to ignore it (i.e., add it to your `.gitignore`).
# gazelle:exclude .build

# This declaration builds a Gazelle binary that incorporates all of the Gazelle
# plugins for the languages that you use in your workspace. In this example, we
# are only listing the Gazelle plugin for Swift from rules_swift_package_manager.
gazelle_binary(
    name = "gazelle_bin",
    languages = [
        "@rules_swift_package_manager//gazelle",
    ],
)

# This macro defines two targets: `swift_update_pkgs` and
# `swift_update_pkgs_to_latest`.
#
# The `swift_update_pkgs` target should be run whenever the list of external
# dependencies is updated in the `Package.swift`. Running this target will
# populate the `swift_deps.bzl` with `swift_package` declarations for all of
# the direct and transitive Swift packages that your project uses.
#
# The `swift_update_pkgs_to_latest` target should be run when you want to
# update your Swift dependencies to their latest eligible version.
swift_update_packages(
    name = "swift_update_pkgs",
    gazelle = ":gazelle_bin",
    swift_deps = "swift_deps.bzl",
    swift_deps_index = "swift_deps_index.json",
    generate_swift_deps_for_workspace = True,
    update_bzlmod_stanzas = False,
    package_manifest = "./xcode/Package.swift"
)

# This target updates the Bazel build files for your project. Run this target
# whenever you add or remove source files from your project.
gazelle(
    name = "update_build_files",
    gazelle = ":gazelle_bin",
)
