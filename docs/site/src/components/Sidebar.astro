---
// https://github.com/lorenzolewis/starlight-utils/blob/main/packages/starlight-utils/components/Sidebar.astro
import Default from "@astrojs/starlight/components/Sidebar.astro";
import { Icon } from "@astrojs/starlight/components";
import type { Props } from "@astrojs/starlight/props";

// Import the sidebar configuration directly from astro.config.mjs
import { sidebarConfig } from "../../astro.config.mjs";

// Automatically generate tabs from the sidebar configuration
const tabs = sidebarConfig.map((section: any, index: number) => {
  // Map section labels to icons
  const iconMap: Record<string, "document" | "puzzle" | "setting"> = {
    Player: "document",
    Plugins: "puzzle",
    Tools: "setting",
  };

  return {
    label: section.label,
    href: `/${section.label.toLowerCase()}/`,
    icon: iconMap[section.label] || ("document" as const),
    section: section.label.toLowerCase(),
    config: section,
  };
});

// Determine current page path
const currentPath = Astro.url.pathname;

// Mark current tab based on the sidebar configuration
const tabsWithCurrent = tabs.map((tab: any) => {
  // Extract all directories from this tab's config
  const directories: string[] = [];

  function extractDirectories(items: any[]) {
    items.forEach((item: any) => {
      if (item.autogenerate?.directory) {
        // Extract base directory from nested paths (e.g., "plugins/android" -> "plugins")
        const baseDir = item.autogenerate.directory.split("/")[0];
        directories.push(baseDir);
      }
      if (item.link) {
        // Extract directory from link (e.g., "/tools/view-ast-explorer" -> "tools")
        const match = item.link.match(/^\/([^\/]+)/);
        if (match) directories.push(match[1]);
      }
      if (item.items) {
        extractDirectories(item.items);
      }
    });
  }

  extractDirectories(tab.config.items);

  // Check if we're in this section
  const isInSection = directories.some((dir: string) => {
    // Check for exact match (e.g., /plugins/ matches /plugins/)
    if (currentPath === `/${dir}/`) return true;
    // Check for subdirectory match (e.g., /plugins/core/ starts with /plugins/)
    return currentPath.startsWith(`/${dir}/`);
  });

  // Special case: if we're on /tools/ and this is the Tools tab, prioritize it
  if (tab.section === "tools" && currentPath.startsWith("/tools/")) {
    return {
      ...tab,
      isCurrent: true,
    };
  }

  // Special case: if we're on /tools/ and this is the Player tab, don't highlight it
  if (tab.section === "player" && currentPath.startsWith("/tools/")) {
    return {
      ...tab,
      isCurrent: false,
    };
  }

  return {
    ...tab,
    isCurrent: isInSection,
  };
});

// Determine which section we're in
const currentSection =
  tabsWithCurrent.find((tab: any) => tab.isCurrent)?.section || "player";
---

<style>
  /* Styles for the custom tab switcher. */
  .tabbed-sidebar {
    /* Layout variables */
    --tab-switcher-border-width: 1px;
    --tab-switcher-padding: calc(0.25rem - var(--tab-switcher-border-width));
    --tab-item-border-radius: 6px;
    --tab-switcher-border-radius: 8px;

    /* Color variables */
    --tab-switcher-border-color: var(--sl-color-hairline-light);
    --tab-switcher-background-color: var(
      --sl-color-gray-7,
      var(--sl-color-gray-6)
    );
    --tab-switcher-text-color: var(--sl-color-gray-3);
    --tab-switcher-text-color--active: var(--sl-color-white);
    --tab-switcher-icon-color: var(--sl-color-gray-4);
    --tab-switcher-icon-color--active: var(--sl-color-text-accent);
    --tab-item-background-color--hover: var(--sl-color-gray-6);
    --tab-item-background-color--active: var(--sl-color-black);
  }
  /* Dark theme variations */
  :global([data-theme="dark"]) .tabbed-sidebar {
    --tab-switcher-text-color: var(--sl-color-gray-2);
    --tab-switcher-icon-color: var(--sl-color-gray-3);
    --tab-item-background-color--hover: var(--sl-color-gray-5);
  }

  @media (min-width: 50rem) {
    /* Dark theme variations with the desktop sidebar visible */
    :global([data-theme="dark"]) .tabbed-sidebar {
      --tab-switcher-background-color: var(--sl-color-black);
      --tab-item-background-color--hover: var(--sl-color-gray-6);
      --tab-item-background-color--active: var(--sl-color-gray-6);
    }
  }

  /** Align sponsors at sidebar bottom when there is room. */
  .desktop-footer {
    margin-top: auto;
  }

  .tab-list {
    list-style: none;
    border: var(--tab-switcher-border-width) solid
      var(--tab-switcher-border-color);
    border-radius: var(--tab-switcher-border-radius);
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    padding: var(--tab-switcher-padding);
    background-color: var(--tab-switcher-background-color);
    margin-bottom: 1.5rem;
  }

  .tab-item {
    border: var(--tab-switcher-border-width) solid transparent;
    border-radius: var(--tab-item-border-radius);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: calc(0.5rem - var(--tab-switcher-border-width));
    background-clip: padding-box;
    line-height: var(--sl-line-height-headings);
    text-decoration: none;
    color: var(--tab-switcher-text-color);
    font-weight: 600;
    font-size: 1rem;
  }

  .tab-item:hover {
    color: var(--tab-switcher-text-color--active);
    background-color: var(--tab-item-background-color--hover);
  }
  .tab-item.current {
    border-color: var(--tab-switcher-border-color);
    color: var(--tab-switcher-text-color--active);
    background-color: var(--tab-item-background-color--active);
  }

  .icon {
    margin: 0.25rem;
    color: var(--tab-switcher-icon-color);
  }

  .tab-item:hover {
    color: var(--tab-switcher-text-color--active);
    background-color: var(--tab-item-background-color--hover);
  }

  .tab-item.current {
    border-color: var(--tab-switcher-border-color);
    color: var(--tab-switcher-text-color--active);
    background-color: var(--tab-item-background-color--active);
  }

  .icon {
    margin: 0.25rem;
    color: var(--tab-switcher-icon-color);
  }
  .tab-item :global(a:hover) .icon {
    color: inherit;
  }
  .tab-item.current .icon {
    color: var(--tab-switcher-icon-color--active);
  }
</style>

<tabbed-content class="tabbed-sidebar">
  <ul class:list={["tab-list", Astro.props.class]}>
    <slot name="tab-list">
      {
        tabsWithCurrent?.map((tab) => {
          const classes = ["tab-item", tab.isCurrent && "current"].filter(
            Boolean,
          );
          return (
            <li>
              <a class:list={classes} href={tab.href} role="tab">
                <Icon class="icon" name={tab.icon} />
                {tab.label}
              </a>
            </li>
          );
        })
      }
    </slot>
  </ul>
</tabbed-content>

<!-- 
  Pass the current section as a data attribute so we can potentially
  filter the sidebar content based on the selected tab
-->
<Default {...Astro.props} data-current-section={currentSection} />
