---
// https://github.com/lorenzolewis/starlight-utils/blob/main/packages/starlight-utils/components/Sidebar.astro
import Default from "@astrojs/starlight/components/Sidebar.astro";
import { Icon } from "@astrojs/starlight/components";
import type { Props } from "@astrojs/starlight/props";
import { AstroError } from "astro/errors";

type SidebarEntry = (typeof Astro.props.sidebar)[number];

export type SidebarData = {
	isCurrentSidebar: boolean;
	starlightProps: Props;
	labelEntry: Props["sidebar"][number];
};

/** Get the icon for a group. Update the icon names in the array to change the icons associated with a group. */
const getIcon = (index: number) => (["seti:video", "puzzle", "setting"] as const)[index];

function getFirstEntry(entry: SidebarEntry) {
	if (entry.type === "group") {
		if (entry.entries.length === 0) {
			return;
		}

		return getFirstEntry(entry.entries[0]);
	}

	return entry;
}

function isCurrent(entry: SidebarEntry) {
	if (entry.type === "link" && entry.isCurrent) {
		return true;
	}

	if (entry.type === "group") {
		return entry.entries.some((s): boolean => isCurrent(s));
	}

	return false;
}

const tabs = Astro.props.sidebar.map((s) => ({
	label: s.label,
	href: getFirstEntry(s)?.href,
	isCurrent: isCurrent(s)
}));

const multiSidebarData: Array<SidebarData> = Astro.props.sidebar.map((entry) => {
	if (entry.type !== "group") {
		throw new AstroError(
			`\`${entry.label}\` cannot be used with multi-sidebar.

  Each top-level \`sidebar\` item in the Starlight config must be either a group or autogenerated.

  See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups for more details.`
		);
	}

	// Recursively check if a group of sidebar entries contains the current page
	const findIfIsCurrent = (entry: (typeof Astro.props.sidebar)[number]): boolean => {
		if (entry.type === "link") {
			return entry.isCurrent;
		}
		return entry.entries.some((item) => findIfIsCurrent(item));
	};

	const isCurrentPage = findIfIsCurrent(entry);

	return {
		isCurrentSidebar: isCurrentPage,
		starlightProps: { ...Astro.props, sidebar: [...entry.entries] },
		labelEntry: entry
	};
});

// If the current page being built is not on a sidebar then set the first sidebar to be shown
if (multiSidebarData[0] && !multiSidebarData.some(({ isCurrentSidebar }) => isCurrentSidebar)) {
	multiSidebarData[0].isCurrentSidebar = true;
}

const activeSidebar = multiSidebarData.find((s) => s.isCurrentSidebar) ?? multiSidebarData[0];

if (activeSidebar.labelEntry.type === "group") {
	activeSidebar.labelEntry.entries.forEach((entry) => {});
}
---

<style>
	/* Styles for the custom tab switcher. */
	.tabbed-sidebar {
		/* Layout variables */
		--tab-switcher-border-width: 1px;
		--tab-switcher-padding: calc(0.25rem - var(--tab-switcher-border-width));
		--tab-item-border-radius: 6px;
		--tab-switcher-border-radius: 8px;

		/* Color variables */
		--tab-switcher-border-color: var(--sl-color-hairline-light);
		--tab-switcher-background-color: var(--sl-color-gray-7, var(--sl-color-gray-6));
		--tab-switcher-text-color: var(--sl-color-gray-3);
		--tab-switcher-text-color--active: var(--sl-color-white);
		--tab-switcher-icon-color: var(--sl-color-gray-4);
		--tab-switcher-icon-color--active: var(--sl-color-text-accent);
		--tab-item-background-color--hover: var(--sl-color-gray-6);
		--tab-item-background-color--active: var(--sl-color-black);
	}
	/* Dark theme variations */
	:global([data-theme="dark"]) .tabbed-sidebar {
		--tab-switcher-text-color: var(--sl-color-gray-2);
		--tab-switcher-icon-color: var(--sl-color-gray-3);
		--tab-item-background-color--hover: var(--sl-color-gray-5);
	}

	@media (min-width: 50rem) {
		/* Dark theme variations with the desktop sidebar visible */
		:global([data-theme="dark"]) .tabbed-sidebar {
			--tab-switcher-background-color: var(--sl-color-black);
			--tab-item-background-color--hover: var(--sl-color-gray-6);
			--tab-item-background-color--active: var(--sl-color-gray-6);
		}
	}

	/** Align sponsors at sidebar bottom when there is room. */
	.desktop-footer {
		margin-top: auto;
	}

	.tab-list {
		list-style: none;
		border: var(--tab-switcher-border-width) solid var(--tab-switcher-border-color);
		border-radius: var(--tab-switcher-border-radius);
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
		padding: var(--tab-switcher-padding);
		background-color: var(--tab-switcher-background-color);
		margin-bottom: 1.5rem;
	}

	.tab-item {
		border: var(--tab-switcher-border-width) solid transparent;
		border-radius: var(--tab-item-border-radius);
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: calc(0.5rem - var(--tab-switcher-border-width));
		background-clip: padding-box;
		line-height: var(--sl-line-height-headings);
		text-decoration: none;
		color: var(--tab-switcher-text-color);
		font-weight: 600;
		font-size: 1rem;
	}

	.tab-item:hover {
		color: var(--tab-switcher-text-color--active);
		background-color: var(--tab-item-background-color--hover);
	}
	.tab-item.current {
		border-color: var(--tab-switcher-border-color);
		color: var(--tab-switcher-text-color--active);
		background-color: var(--tab-item-background-color--active);
	}

	.icon {
		margin: 0.25rem;
		color: var(--tab-switcher-icon-color);
	}

	.tab-item:hover {
		color: var(--tab-switcher-text-color--active);
		background-color: var(--tab-item-background-color--hover);
	}

	.tab-item.current {
		border-color: var(--tab-switcher-border-color);
		color: var(--tab-switcher-text-color--active);
		background-color: var(--tab-item-background-color--active);
	}

	.icon {
		margin: 0.25rem;
		color: var(--tab-switcher-icon-color);
	}
	.tab-item :global(a:hover) .icon {
		color: inherit;
	}
	.tab-item.current .icon {
		color: var(--tab-switcher-icon-color--active);
	}
</style>

<tabbed-content class='tabbed-sidebar'>
	<ul class:list={["tab-list", Astro.props.class]}>
		<slot name='tab-list'>
			{
				tabs?.map((tab, index) => (
					<li>
						<a
							class:list={["tab-item", tab.isCurrent && "current"].filter(Boolean)}
							href={tab.href}
							role='tab'
						>
							<Icon class='icon' name={getIcon(index)} />
							{tab.label}
						</a>
					</li>
				))
			}
		</slot>
	</ul>
</tabbed-content>

<Default {...Astro.props} sidebar={(activeSidebar.labelEntry as any).entries} />
