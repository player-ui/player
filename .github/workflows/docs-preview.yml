name: Deploy Docs Preview

on:
  issue_comment:
    types:
      - created

jobs:
  check_auth:
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/docs' }}
    steps:
      - name: Check auth
        id: check_auth
        uses: actions/github-script@v6
        with:
          result-encoding: string
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { owner, repo } = context.issue;
            const { login: username } = context.payload.comment.user;
            await github.rest.repos.checkCollaborator({
              owner,
              repo,
              username,
            });
            github.rest.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: "eyes",
            });
            const { number: pull_number } = context.payload.issue;
            return pull_number;
      - name: Not a collaborator
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { owner, repo, number: issue_number } = context.issue;
            github.rest.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: "-1",
            });
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: 'Docs previews can only be requested by collaborators. Please tag a maintainer to request a docs preview. ❌',
            });
    outputs:
      pr_number: ${{ steps.check_auth.outputs.result }}

  deploy-docs-preview:
    runs-on: ubuntu-latest
    needs: check_auth
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bazel
        run: |
          wget -q https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-linux-amd64 -O bazelisk
          chmod +x bazelisk
          echo "$(pwd)" >> $GITHUB_PATH

      - name: Build and Deploy Docs Preview
        id: deploy
        run: |
          PR_NUMBER=${{ needs.check_auth.outputs.pr_number }}
          echo "Deploying docs preview for PR #$PR_NUMBER"
          STABLE_DOCS_BASE_PATH="pr/$PR_NUMBER" \
          STABLE_ALGOLIA_SEARCH_API_KEY=${{ secrets.ALGOLIA_NEXT_SEARCH_API_KEY }} \
          STABLE_ALGOLIA_SEARCH_APPID="D477I7TDXB" \
          STABLE_ALGOLIA_SEARCH_INDEX="crawler_Player (Next)" \
          bazel run --config=release //docs:gh_deploy -- --dest_dir "pr/$PR_NUMBER"
          echo "deployment_success=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Comment on PR
        if: steps.deploy.outputs.deployment_success == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const currentDate = new Date().toUTCString();
            const prNumber = ${{ needs.check_auth.outputs.pr_number }};
            const buildUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const commentId = `docs-preview-${prNumber}`;
            let comment = `<!-- ${commentId} -->\n### Docs Preview\n\n`;
            comment += `Your PR docs changes were deployed to [pr/${prNumber}](https://github.com/player-ui/player-ui.github.io/tree/main/pr/${prNumber}) on \`${currentDate}\`\n\n`;
            comment += `🚀 https://player-ui.github.io/pr/${prNumber}/`;

            // Find and update existing comment or create new one
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const existingComment = comments.data.find(c => 
              c.body.includes(`<!-- ${commentId} -->`)
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }

      - name: Deployment success
        if: steps.deploy.outputs.deployment_success == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { owner, repo } = context.issue;
            github.rest.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: "rocket",
            });

      - name: Deployment failed
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { owner, repo } = context.issue;
            github.rest.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: "confused",
            });
